/**
 * Handles events generated by the Maintenance document feature
 * @author Jeff Martin
 * @since 21.1
 */
Ext.define('Maintenance.controller.WorkRequestDocuments', {
    extend: 'Ext.app.Controller',

    requires: [ 'Maintenance.view.overlay.PhotoPanel' ],

    config: {
        refs: {
            mainView: 'mainview',
            workRequestView: 'workRequestPanel',
            documentViewItem: 'documentItem'
        },
        control: {
            'button[action=capturePhoto]': {
                tap: 'onCapturePhoto'
            },
            'button[action=attachPhoto]': {
                tap: 'onAttachPhoto'
            },
            'button[action=closePhotoPanel]': {
                tap: 'onClosePhotoPanel'
            },
            documentViewItem: {
                displaydocument: 'onDisplayDocument'
            }
        }
    },

    /**
     * Camera photo quality. 100 is the max value. The quality
     * value impacts the size of the acquired image.
     */
    IMAGE_QUALITY: 30,

    /**
     * Launches the device camera. Displays the photo if the capture is
     * successful.
     */
    onCapturePhoto: function () {
        var me = this,
            onSuccess = function (imageData) {
                    me.displayPhoto(imageData, false);
            },
            onFail = function (message) {
                // Do nothing if there is a failure.
                // We cannot distiguish between cancelling the photo acquisition and
                // an error
            };

        navigator.camera.getPicture(onSuccess, onFail, {
            quality: me.IMAGE_QUALITY,
            destinationType: Camera.DestinationType.DATA_URL
        });
    },

    /**
     * Returns the PhotoPanel view to be used for the current profile
     */
    getPhotoPanelView: function () {
        var profile = this.getApplication().getCurrentProfile().getNamespace(),
            view = Ext.create('Maintenance.view.' + profile + '.PhotoPanel');

        return view;
    },

    onDisplayDocument: function (mobileWrId, fileName, documentFieldId) {
        var workRequestStore = Ext.getStore('workRequestsStore'),
            workRequestRecord = workRequestStore.findRecord('id', mobileWrId),
            documentField = 'doc' + documentFieldId.toString() + '_contents',
            documentData;

        if (workRequestRecord) {
            documentData = workRequestRecord.get(documentField);
            this.displayPhoto(documentData, true);
        }
    },

    displayPhoto: function (imageData, isDisplayOnly) {
        var me = this;

        if (!me.photoPanel) {
            me.photoPanel = me.getPhotoPanelView();
            Ext.Viewport.add(me.photoPanel);
        }

        me.photoPanel.setIsDisplayOnly(isDisplayOnly);
        me.photoPanel.setImageData(imageData);
        me.photoPanel.show();
    },

    onAttachPhoto: function () {
        var me = this,
            photoPanel = me.getPhotoPanel(),
            workRequestView = me.getWorkRequestView(),
            workRequestRecord = workRequestView.getRecord(),
            workRequestStore = Ext.getStore('workRequestsStore');

        document.activeElement.blur();

        me.addPhotoToWorkRequestRecord(workRequestRecord);

        // If this is an update view we need to save the work request record
        if (workRequestView.getIsCreateView()) {
            me.onClosePhotoPanel();
            workRequestView.applyPhotoData();
        } else {
            workRequestStore.sync(function(){
                photoPanel.fireEvent('photoattached', workRequestRecord);
                me.onClosePhotoPanel();
            }, me);
        }
    },

    addPhotoToWorkRequestRecord: function(workRequestRecord) {
        var me = this,
            photoPanel = me.getPhotoPanel(),
            imageData = photoPanel.getImageData(),
            documentField = me.getAvailableDocumentField(workRequestRecord);

        if (documentField === null) {
            Ext.Msg.alert('Documents', 'All Work Request document fields are in use.<br>' +
                                       'The photo cannot be attached to the Work Request');
            return;
        } else {
            workRequestRecord.set(documentField, documentField + '.jpg');
            workRequestRecord.set(documentField + '_contents', imageData);
            workRequestRecord.set(documentField + '_isnew', true);
            workRequestRecord.set('mob_is_changed', 1);
        }
    },

    onClosePhotoPanel: function () {
        if (this.photoPanel) {
            this.photoPanel.hide();
        }
    },

    /**
     * Checks all of the document fields and returns the field name of the first empty document field.
     * Returns null if all document fields are populated.
     *
     * @param workRequestRecord
     * @return {*}
     */
    getAvailableDocumentField: function (workRequestRecord) {
        var data = workRequestRecord.getData(),
            documentFields = [ 'doc1', 'doc2', 'doc3', 'doc4' ], i;

        for (i = 0; i < documentFields.length; i++) {
            if (data[documentFields[i]] === null) {
                return documentFields[i];
            }
        }
        return null;
    }
});
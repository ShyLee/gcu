/**
 * Handles displaying views and saving Edit Panel data. Works with the Common.view.navigation.NavigationView class to
 * display and edit data views.
 *
 * Handles events generated by the Common.view.navigation.NavigationBar class for moving back one view, displaying edit
 * panels and saving edit panel data.
 *
 *
 * @author Jeff Martin
 * @since 21.1
 */
// TODO comment class responsibility: Views are created when displayed and destroyed when removed from the
    // navigation view.
// TODO Each empty line should mean something. Use empty lines to separate steps in your logic. 
// TODO this class does not follow the Dependency Injection (DI) principle: objects do not look up their dependencies, but are provided with them.
Ext.define('Common.controller.NavigationController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: null,
            navigationBar: 'navigationbar'
        },
        control: {
            navigationBar: {
                add: function (navBar) {
                    this.displayAddPanel(navBar);
                },
                save: 'saveEditPanel'
            },
            'container[isNavigationList=true]': {
                itemDisclosed: 'displayUpdatePanel',
                itemSingleTapped: 'displayUpdatePanel'
            },
            mainView: {
                pop: 'onViewPopped'
            }
        },

        lastPushedView: ''
    },

    constructor: function (config) {
        if (!this.config.refs.mainView) {
            throw new Error(
                    'A mainView ref config must be provided when extending the Common.controller.NavigationController class');
        }

        this.callParent([config]);
    },

    /**
     * Displays an Edit Panel when the disclose action is fired by a List Panel. The Edit panel contains
     * the record from the list row that was clicked. The Edit Panel that is displayed is determined by
     * the List View editViewClass configuration property.
     *
     * @param view
     *            {Container} The List View that generated the itemDisclosed event.
     * @param record
     *            {Model} The record associated with the List View row that was clicked.
     */
    // TODO should the parameter be editViewClassName?
    displayUpdatePanel: function (view, record) {
        var editView = view.getEditViewClass(),
            updateView = Ext.create(editView),
            lastViewPushed = this.getLastPushedView();

        if(lastViewPushed === updateView.$className) {
            updateView.destroy();
            return;
        }
        this.setLastPushedView(updateView.$className);

        updateView.setRecord(record);
        this.getMainView().push(updateView);
    },

    /**
     * Displays an Edit Panel for adding new records to the List View. The displayed Edit Panel is
     * determined by the List View editViewClass configuration setting.
     *
     * @param navBar
     *            {NavigationBar} Contains a reference to the currently displayed view.
     */
    // TODO should the parameter be "currently displayed view"?
    displayAddPanel: function (navBar) {
        var editViewClassName = navBar.getCurrentView().getEditViewClass(),
            view = Ext.create(editViewClassName, {
                                  isCreateView: true
                              });

        this.getMainView().push(view);
    },

    onViewPopped: function (mainView, view) {
        this.setLastPushedView('');
    },


    /**
     * Saves the contents of the Edit Panel to the database Validates and displays validation errors on
     * the Edit Panel
     *
     * @param navBar
     *            {NavigationBar} Contains a reference to the currently displayed view.
     */
    // TODO should the parameter be "currently displayed view"?
    saveEditPanel: function (navBar) {
        var me = this, view = navBar.getCurrentView(),
            record = view.getRecord(),
            store = Ext.getStore(view.getStoreId());

        // Check validation
        if (record.isValid()) {
            record.setChangedOnMobile();
            store.add(record);
            store.sync(function () {
                me.getMainView().pop();
            });
        } else {
            view.displayErrors(record);
        }
    }
});